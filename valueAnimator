

This class provides a simple timing engine for running animations which calculate animated values and set them on target objects.

There is a single timing pulse that all animations use. It runs in a custom handler to ensure that property changes happen on the UI thread.

By default, ValueAnimator uses non-linear time interpolation, via the AccelerateDecelerateInterpolator class, which accelerates into and decelerates out of an animation. This behavior can be changed by calling setInterpolator(TimeInterpolator).

Animators can be created from either code or resource files. Here is an example of a ValueAnimator resource file:
<animator xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="1000"
    android:valueFrom="1"
    android:valueTo="0"
    android:valueType="floatType"
    android:repeatCount="1"
    android:repeatMode="reverse"/>

It is also possible to use a combination of PropertyValuesHolder and Keyframe resource tags to create a multi-step animation. Note that you can specify explicit fractional values (from 0 to 1) for each keyframe to determine when, in the overall duration, the animation should arrive at that value. Alternatively, you can leave the fractions off and the keyframes will be equally distributed within the total duration:
<animator xmlns:android="http://schemas.android.com/apk/res/android"
          android:duration="1000"
          android:repeatCount="1"
          android:repeatMode="reverse">
    <propertyValuesHolder>
        <keyframe android:fraction="0" android:value="1"/>
        <keyframe android:fraction=".2" android:value=".4"/>
        <keyframe android:fraction="1" android:value="0"/>
    </propertyValuesHolder>
</animator>


api


interface ValueAnimator.AnimatorUpdateListener
    Implementors of this interface can add themselves as update listeners to an ValueAnimator instance to receive callbacks on every animation frame, after the current frame's values have been calculated for that ValueAnimator.

Constants
    INFINITE
        This value used used with the setRepeatCount(int) property to repeat the animation indefinitely.
    RESTART
        When the animation reaches the end and repeatCount is INFINITE or a positive value, the animation restarts from the beginning.
    REVERSE
        When the animation reaches the end and repeatCount is INFINITE or a positive value, the animation reverses direction on every iteration.

ValueAnimator()


void addUpdateListener(ValueAnimator.AnimatorUpdateListener listener)
    Adds a listener to the set of listeners that are sent update events through the life of an animation.

void cancel()
    Cancels the animation.

ValueAnimator clone()
    Creates and returns a copy of this object.

void end()
    Ends the animation.

float getAnimatedFraction()
    Returns the current animation fraction, which is the elapsed/interpolated fraction used in the most recent frame update on the animation.

Object getAnimatedValue()
    The most recent value calculated by this ValueAnimator when there is just one property being animated.

Object getAnimatedValue(String propertyName)
    The most recent value calculated by this ValueAnimator for propertyName.

long getCurrentPlayTime()
    Gets the current position of the animation in time, which is equal to the current time minus the time that the animation started.

long getDuration()
    Gets the length of the animation.

static long	getFrameDelay()
    The amount of time, in milliseconds, between each frame of the animation.

TimeInterpolator getInterpolator()
    Returns the timing interpolator that this ValueAnimator uses.

int	getRepeatCount()
    Defines how many times the animation should repeat.

int	getRepeatMode()
    Defines what this animation should do when it reaches the end.

long getStartDelay()
    The amount of time, in milliseconds, to delay starting the animation after start() is called.

long getTotalDuration()
    Gets the total duration of the animation, accounting for animation sequences, start delay, and repeating.

PropertyValuesHolder[]	getValues()
    Returns the values that this ValueAnimator animates between.

boolean	isRunning()
    Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended).

boolean	isStarted()
    Returns whether this Animator has been started and not yet ended.

static ValueAnimator ofArgb(int... values)
    Constructs and returns a ValueAnimator that animates between color values.

static ValueAnimator ofFloat(float... values)
    Constructs and returns a ValueAnimator that animates between float values.

static ValueAnimator ofInt(int... values)
    Constructs and returns a ValueAnimator that animates between int values.

static ValueAnimator ofObject(TypeEvaluator evaluator, Object... values)
    Constructs and returns a ValueAnimator that animates between Object values.

static ValueAnimator ofPropertyValuesHolder(PropertyValuesHolder... values)
    Constructs and returns a ValueAnimator that animates between the values specified in the PropertyValuesHolder objects.

void pause()
    Pauses a running animation.

void removeAllUpdateListeners()
    Removes all listeners from the set listening to frame updates for this animation.

void removeUpdateListener(ValueAnimator.AnimatorUpdateListener listener)
    Removes a listener from the set listening to frame updates for this animation.

void resume()
    Resumes a paused animation, causing the animator to pick up where it left off when it was paused.

void reverse()
    Plays the ValueAnimator in reverse.

void setCurrentFraction(float fraction)
    Sets the position of the animation to the specified fraction.

void setCurrentPlayTime(long playTime)
    Sets the position of the animation to the specified point in time.

ValueAnimator setDuration(long duration)
    Sets the length of the animation.

void setEvaluator(TypeEvaluator value)
    The type evaluator to be used when calculating the animated values of this animation.

void setFloatValues(float... values)
    Sets float values that will be animated between.

static void	setFrameDelay(long frameDelay)
    The amount of time, in milliseconds, between each frame of the animation.

void setIntValues(int... values)
    Sets int values that will be animated between.

void setInterpolator(TimeInterpolator value)
    The time interpolator used in calculating the elapsed fraction of this animation.

void setObjectValues(Object... values)
    Sets the values to animate between for this animation.

void setRepeatCount(int value)
    Sets how many times the animation should be repeated.

void setRepeatMode(int value)
    Defines what this animation should do when it reaches the end.

void setStartDelay(long startDelay)
    The amount of time, in milliseconds, to delay starting the animation after start() is called.

void setValues(PropertyValuesHolder... values)
    Sets the values, per property, being animated between.

void start()
    Starts this animation.

String toString()
    Returns a string representation of the object.


















.
